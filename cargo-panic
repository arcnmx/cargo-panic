#!/usr/bin/env bash
set -eu

while [[ ${1-} == panic ]]; do
	shift
done

case ${RUST_BACKTRACE-color} in
	0)
		exec "${CARGO-cargo}" "$@"
		;;
	debug_test)
		__CARGO_PANIC_FEATURES="debug_test"
		;;
	pretty)
		__CARGO_PANIC_FEATURES="pretty_backtrace"
		;;
	color|full|*)
		__CARGO_PANIC_FEATURES="color-backtrace"
		export RUST_BACKTRACE=full
		;;
esac

if [[ -z ${CARGO_PANIC_DIR-} ]]; then
	CARGO_PANIC_DIR=${BASH_SOURCE[0]}
	if [[ -L $CARGO_PANIC_DIR ]]; then
		CARGO_PANIC_DIR=$(readlink "$CARGO_PANIC_DIR")
	fi
	CARGO_PANIC_DIR=$(cd "$(dirname "$CARGO_PANIC_DIR")" >/dev/null 2>&1 && pwd)
fi

__CARGO_PANIC_CRATE="cargo-panic-hook"
__CARGO_PANIC_CRATE_DIR="$CARGO_PANIC_DIR/hook"

if [[ -w $CARGO_PANIC_DIR ]]; then
	__CARGO_PANIC_DIR=$CARGO_PANIC_DIR/target
else
	__CARGO_PANIC_DIR=${XDG_CACHE_HOME-$HOME/.cache}/cargo-panic
fi

export __CARGO_PANIC_LIB=$(
	CARGO_TARGET_DIR=$__CARGO_PANIC_DIR ${CARGO-cargo} build --color always --features "$__CARGO_PANIC_FEATURES" --manifest-path "$__CARGO_PANIC_CRATE_DIR/Cargo.toml" --message-format json \
		2> >(grep -vF "    Finished" >&2 || true) \
		| jq -er 'select(.reason == "compiler-artifact" and .target.name == "'"$__CARGO_PANIC_CRATE"'" and .target.kind[0] == "dylib").filenames[0]' \
)

if [[ ! -f $__CARGO_PANIC_LIB ]]; then
	echo "cargo-panic: $__CARGO_PANIC_LIB not found" >&2
fi

if [[ -n ${RUSTC_WRAPPER-} ]]; then
	export _RUSTC_WRAPPER=$RUSTC_WRAPPER
fi

#export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER=$CARGO_PANIC_DIR/bin/runner
#export CARGO_TARGET_X86_64_APPLE_DARWIN_RUNNER=$CARGO_PANIC_DIR/bin/runner
export RUSTC_WRAPPER=$CARGO_PANIC_DIR/bin/wrapper

exec "${CARGO-cargo}" "$@"
